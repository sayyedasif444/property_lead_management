{"version":3,"sources":["views/app-views/ProfileManage/editUser.js","views/app-views/ProfileManage/editPassword.js","views/app-views/ProfileManage/index.js"],"names":["Option","Select","connect","state","isError","user","errMessage","isErrorType","first_name","auth","last_name","emailid","email","user_type","phone_number","id","editUser","visible","cancel","Form","useForm","form","useEffect","setFieldsValue","layout","name","preserve","onFinish","values","gutter","span","Item","label","rules","required","message","placeholder","type","style","display","size","width","value","className","htmlType","singleData","passwordUpdate","getFieldValue","validator","rule","Promise","reject","resolve","data","loading","isAuthenticated","listUser","deleteUser","success","error","lg"],"mappings":"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","file":"static/js/27.517e702c.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Row, Col, Form, Input, Button, Select } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { editUser } from '../../../apis/dashboard/User';\r\nconst { Option } = Select;\r\n\r\nconst AddUser = ({\r\n  visible,\r\n  cancel,\r\n  errMessage,\r\n  isError,\r\n  isErrorType,\r\n  editUser,\r\n  first_name,\r\n  last_name,\r\n  emailid,\r\n  user_type,\r\n  phone_number,\r\n  id,\r\n}) => {\r\n  const [form] = Form.useForm();\r\n\r\n  const onSubmit = (values) => {\r\n    values.id = id;\r\n    editUser(values, true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      first_name: first_name !== null ? first_name : '',\r\n      last_name: last_name !== null ? last_name : '',\r\n      emailid: emailid !== null ? emailid : '',\r\n      phone_number: phone_number !== null ? phone_number : '',\r\n      user_type: user_type !== null ? user_type : '',\r\n    });\r\n  }, [emailid, first_name, form, last_name, phone_number, user_type]);\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      layout='vertical'\r\n      name='new-company'\r\n      preserve={false}\r\n      onFinish={onSubmit}\r\n    >\r\n      <Row gutter={16}>\r\n        <Col span={8}>\r\n          <Form.Item\r\n            name='first_name'\r\n            label={<span>First Name</span>}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: `Please input First Name`,\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder='First Name' />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Form.Item\r\n            name='last_name'\r\n            label={<span>Last Name</span>}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: `Please input Last Name`,\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder='Last Name' />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Form.Item\r\n            name='emailid'\r\n            label={<span>Email Id</span>}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: `Please input Email Id`,\r\n              },\r\n            ]}\r\n          >\r\n            <Input type='email' placeholder='Email Id' />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} style={{ display: 'none' }}>\r\n          <Form.Item\r\n            name='user_type'\r\n            label={<span>User Role</span>}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: `Please input user type`,\r\n              },\r\n            ]}\r\n          >\r\n            <Select size={'default'} style={{ width: '100%' }}>\r\n              <Option value={'USER'}>USER</Option>\r\n              <Option value={'ADMIN'}>ADMIN</Option>\r\n            </Select>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Form.Item name='phone_number' label={<span>Phone Number</span>}>\r\n            <Input placeholder='Phone Number' />\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Form.Item className='text-right mb-0'>\r\n        <Button type='primary' htmlType='submit'>\r\n          Save\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nAddUser.propTypes = {\r\n  editUser: PropTypes.any,\r\n  isError: PropTypes.bool,\r\n  errMessage: PropTypes.string,\r\n  singleData: PropTypes.any,\r\n  isErrorType: PropTypes.string,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  isError: state.user.isError,\r\n  errMessage: state.user.errMessage,\r\n  isErrorType: state.user.isErrorType,\r\n  first_name: state.auth.first_name,\r\n  last_name: state.auth.last_name,\r\n  emailid: state.auth.email,\r\n  user_type: state.auth.user_type,\r\n  phone_number: state.auth.phone_number,\r\n  id: state.auth.id,\r\n});\r\nexport default connect(mapStateToProps, { editUser })(AddUser);\r\n","import React from 'react';\r\nimport { Row, Col, Form, Input, Button } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { passwordUpdate } from '../../../apis/dashboard/User';\r\n\r\nconst AddUser = ({ passwordUpdate, singleData }) => {\r\n  const [form] = Form.useForm();\r\n\r\n  const onSubmit = (values) => {\r\n    values.id = singleData;\r\n    passwordUpdate(values);\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      layout='vertical'\r\n      name='new-company'\r\n      preserve={false}\r\n      onFinish={onSubmit}\r\n    >\r\n      <Row gutter={16}>\r\n        <Col span={8}>\r\n          <Form.Item\r\n            name='old_password'\r\n            label={<span>Old Password</span>}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: `Please input Old Password`,\r\n              },\r\n            ]}\r\n          >\r\n            <Input type='password' placeholder='Old Password' />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Form.Item\r\n            name='password'\r\n            label={<span>Password</span>}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: `Please input Password`,\r\n              },\r\n            ]}\r\n          >\r\n            <Input type='password' placeholder='Password' />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Form.Item\r\n            name='confirm_password'\r\n            label={<span>Confirm Password</span>}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: `Please input Confirm Password`,\r\n              },\r\n              ({ getFieldValue }) => ({\r\n                validator(rule, value) {\r\n                  if (value) {\r\n                    if (value !== form.getFieldValue('password')) {\r\n                      return Promise.reject('Passwords does not match');\r\n                    }\r\n                    return Promise.resolve();\r\n                  } else {\r\n                    return Promise.resolve();\r\n                  }\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input type='password' placeholder='Confirm Password' />\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n      <Form.Item className='text-right mb-0'>\r\n        <Button type='primary' htmlType='submit'>\r\n          Save\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nAddUser.propTypes = {\r\n  passwordUpdate: PropTypes.any,\r\n  isError: PropTypes.bool,\r\n  errMessage: PropTypes.string,\r\n  singleData: PropTypes.any,\r\n  isErrorType: PropTypes.string,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  isError: state.user.isError,\r\n  errMessage: state.user.errMessage,\r\n  isErrorType: state.user.isErrorType,\r\n  singleData: state.auth.id,\r\n});\r\nexport default connect(mapStateToProps, { passwordUpdate })(AddUser);\r\n","import { Card, Col, message, Row } from 'antd';\r\nimport React from 'react';\r\nimport EditUser from './editUser';\r\nimport EditUserPass from './editPassword';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { deleteUser, listUser } from '../../../apis/dashboard/User';\r\n\r\nconst Index = ({\r\n  data,\r\n  loading,\r\n  errMessage,\r\n  isError,\r\n  isErrorType,\r\n  isAuthenticated,\r\n  listUser,\r\n  deleteUser,\r\n}) => {\r\n  // useEffect(() => {\r\n  //   if (isAuthenticated) {\r\n  //     listUser();\r\n  //   }\r\n  // }, [listUser, isAuthenticated]);\r\n\r\n  useEffect(() => {\r\n    if (isError && isErrorType === 'SUCCESS') {\r\n      message.success(errMessage);\r\n    } else if (isError && isErrorType === 'FAIL') {\r\n      message.error(errMessage);\r\n    }\r\n  }, [isError, isErrorType, errMessage]);\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Row>\r\n          <Col lg={24} className='border-bottom mt-0 pb-3'>\r\n            <h4 className='border-bottom pb-2 mb-3'>User Details</h4>\r\n            <EditUser />\r\n          </Col>\r\n          <Col lg={24} className='mt-3'>\r\n            <h4 className='border-bottom pb-2 mb-3'>Change Password</h4>\r\n            <EditUserPass />\r\n          </Col>\r\n        </Row>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nIndex.propTypes = {\r\n  listUser: PropTypes.func,\r\n  deleteUser: PropTypes.func,\r\n  data: PropTypes.any,\r\n  loading: PropTypes.any,\r\n  isError: PropTypes.bool,\r\n  errMessage: PropTypes.string,\r\n  isErrorType: PropTypes.string,\r\n  isAuthenticated: PropTypes.any,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  data: state.user.data,\r\n  loading: state.user.loading,\r\n  isError: state.user.isError,\r\n  errMessage: state.user.errMessage,\r\n  isErrorType: state.user.isErrorType,\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n});\r\nexport default connect(mapStateToProps, { listUser, deleteUser })(Index);\r\n"],"sourceRoot":""}