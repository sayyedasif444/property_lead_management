{"version":3,"sources":["views/auth-views/authentication/forgot-password/index.js"],"names":["backgroundStyle","backgroundImage","backgroundRepeat","backgroundSize","connect","state","isError","auth","errMessage","isErrorType","forgotPassword","Form","useForm","form","history","useHistory","onSend","useSelector","theme","currentTheme","values","a","sessionStorage","setItem","email","useEffect","message","success","setTimeout","e","push","className","style","justify","xs","sm","md","lg","background","src","alt","height","marginTop","div","initial","opacity","marginBottom","animate","type","showIcon","layout","name","onFinish","Item","rules","required","getFieldValue","validator","rule","value","test","Promise","reject","resolve","placeholder","prefix","loading","htmlType","block","href"],"mappings":"6QASMA,EAAkB,CACtBC,gBAAiB,GACjBC,iBAAkB,YAClBC,eAAgB,SA0JHC,uBALS,SAACC,GAAD,MAAY,CAClCC,QAASD,EAAME,KAAKD,QACpBE,WAAYH,EAAME,KAAKC,WACvBC,YAAaJ,EAAME,KAAKE,eAEc,CAAEC,oBAA3BN,EAvJQ,SAAC,GAKjB,IAJLM,EAII,EAJJA,eACAJ,EAGI,EAHJA,QACAE,EAEI,EAFJA,WACAC,EACI,EADJA,YAEA,EAAeE,IAAKC,UAAbC,EAAP,oBACMC,EAAUC,cAEVC,GADQC,aAAY,SAACZ,GAAD,OAAWA,EAAMa,MAAMC,gBACrC,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACPC,eAAeC,QAAQ,gBAAiBH,EAAOI,OADxC,uBAEPd,EAAeU,EAAOI,OAFf,2CAAH,uDAcZ,OAVAC,qBAAU,WACR,GAAInB,GAA2B,kBAAhBG,EAAiC,CAC9CiB,IAAQC,QAAQnB,GAEhBoB,YAAW,SAACC,GACVf,EAAQgB,KAFE,iBAGT,QAEJ,CAACxB,EAASG,EAAaK,EAASD,EAAML,IAGvC,qBAAKuB,UAAU,WAAWC,MAAOhC,EAAjC,SACE,qBAAK+B,UAAU,4DAAf,SACE,cAAC,IAAD,CAAKE,QAAQ,SAAb,SACE,cAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAjC,SACE,cAAC,IAAD,CAAMN,UAAU,SAASC,MAAO,CAAEM,WAAY,WAA9C,SACE,sBAAKP,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,qBACEA,UAAU,YACVQ,IAAG,eACmB,kBAEtBC,IAAI,GACJR,MAAO,CAAES,OAAQ,UAEnB,oBAAIV,UAAU,mCAAd,8BAGA,mBAAGA,UAAU,kBAAb,mDAIF,cAAC,IAAD,CAAKE,QAAQ,SAASD,MAAO,CAAEU,UAAW,SAA1C,SACE,eAAC,IAAD,CAAKR,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAjC,UACE,cAAC,IAAOM,IAAR,CACEC,QAAS,CAAEC,QAAS,EAAGC,aAAc,GACrCC,QAAS,CACPF,QAASvC,EAAU,EAAI,EACvBwC,aAAcxC,EAAU,GAAK,GAE/ByB,UAAU,GANZ,SAQGzB,GAA2B,iBAAhBG,EACV,cAAC,IAAD,CACEuC,KAAK,QACLC,UAAQ,EACRvB,QAASlB,IAGXF,GACgB,kBAAhBG,GACE,cAAC,IAAD,CACEuC,KAAK,UACLC,UAAQ,EACRvB,QAASlB,MAKjB,eAAC,IAAD,CACEK,KAAMA,EACNqC,OAAO,WACPC,KAAK,kBACLC,SAAUpC,EAJZ,UAME,cAAC,IAAKqC,KAAN,CACEF,KAAK,QACLG,MAAO,CACL,CACEC,UAAU,EACV7B,QAAS,mCAEX,CACEsB,KAAM,QACNtB,QAAS,kCAEX,cAAG8B,cAAH,MAAwB,CACtBC,UADsB,SACZC,EAAMC,GACd,GAAIA,EAAO,CAGT,MADE,qGACSC,KAAKD,GACPE,QAAQC,OACb,0CAGGD,QAAQE,UAEf,OAAOF,QAAQE,cAvBzB,SA6BE,cAAC,IAAD,CACEC,YAAY,gBACZC,OAAQ,cAAC,IAAD,CAAclC,UAAU,qBAGpC,cAAC,IAAKsB,KAAN,CAAWtB,UAAU,OAArB,SACE,cAAC,IAAD,CACEmC,SAAS,EACTlB,KAAK,UACLmB,SAAS,SACTC,OAAK,EAJP,SAMuB,WAGzB,mBAAGrC,UAAU,kBAAb,SACE,mBAAGsC,KAAK,cAActC,UAAU,aAAhC","file":"static/js/31.8830712b.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Card, Row, Col, Form, Input, Button, Alert, message } from 'antd';\r\nimport { MailOutlined } from '@ant-design/icons';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { forgotPassword } from '../../../../apis/login/auth';\r\nimport PropTypes from 'prop-types';\r\nimport { motion } from 'framer-motion';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst backgroundStyle = {\r\n  backgroundImage: '',\r\n  backgroundRepeat: 'no-repeat',\r\n  backgroundSize: 'cover',\r\n};\r\n\r\nconst ForgotPassword = ({\r\n  forgotPassword,\r\n  isError,\r\n  errMessage,\r\n  isErrorType,\r\n}) => {\r\n  const [form] = Form.useForm();\r\n  const history = useHistory();\r\n  const theme = useSelector((state) => state.theme.currentTheme);\r\n  const onSend = async (values) => {\r\n    await sessionStorage.setItem('email_otp_val', values.email);\r\n    await forgotPassword(values.email);\r\n  };\r\n  useEffect(() => {\r\n    if (isError && isErrorType === 'RESET_SUCCESS') {\r\n      message.success(errMessage);\r\n      const uri = '/auth/login';\r\n      setTimeout((e) => {\r\n        history.push(uri);\r\n      }, 100);\r\n    }\r\n  }, [isError, isErrorType, history, form, errMessage]);\r\n\r\n  return (\r\n    <div className='h-100 bg' style={backgroundStyle}>\r\n      <div className='container d-flex flex-column justify-content-center h-100'>\r\n        <Row justify='center'>\r\n          <Col xs={20} sm={20} md={20} lg={9}>\r\n            <Card className='shadow' style={{ background: '#1245A8' }}>\r\n              <div className='my-2'>\r\n                <div className='text-center'>\r\n                  <img\r\n                    className='img-fluid'\r\n                    src={`/img/${\r\n                      theme === 'light' ? 'logo-white.png' : 'logo-white.png'\r\n                    }`}\r\n                    alt=''\r\n                    style={{ height: '70px' }}\r\n                  />\r\n                  <h3 className='mt-3 font-weight-bold text-white'>\r\n                    Forgot Password?\r\n                  </h3>\r\n                  <p className='mb-4 text-white'>\r\n                    Enter your Email to reset password\r\n                  </p>\r\n                </div>\r\n                <Row justify='center' style={{ marginTop: '-10px' }}>\r\n                  <Col xs={24} sm={24} md={20} lg={20}>\r\n                    <motion.div\r\n                      initial={{ opacity: 0, marginBottom: 0 }}\r\n                      animate={{\r\n                        opacity: isError ? 1 : 0,\r\n                        marginBottom: isError ? 10 : 0,\r\n                      }}\r\n                      className=''\r\n                    >\r\n                      {isError && isErrorType === 'RESET_FAILED' ? (\r\n                        <Alert\r\n                          type='error'\r\n                          showIcon\r\n                          message={errMessage}\r\n                        ></Alert>\r\n                      ) : (\r\n                        isError &&\r\n                        isErrorType === 'RESET_SUCCESS' && (\r\n                          <Alert\r\n                            type='success'\r\n                            showIcon\r\n                            message={errMessage}\r\n                          ></Alert>\r\n                        )\r\n                      )}\r\n                    </motion.div>\r\n                    <Form\r\n                      form={form}\r\n                      layout='vertical'\r\n                      name='forget-password'\r\n                      onFinish={onSend}\r\n                    >\r\n                      <Form.Item\r\n                        name='email'\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input your email address',\r\n                          },\r\n                          {\r\n                            type: 'email',\r\n                            message: 'Please enter a validate email!',\r\n                          },\r\n                          ({ getFieldValue }) => ({\r\n                            validator(rule, value) {\r\n                              if (value) {\r\n                                var format =\r\n                                  /(\\W*(<script)\\W*)|(\\W*(javascript)\\W*)|(\\W*(jquery)\\W*)|(\\W*(console.)\\W*)|(\\W*(<)\\W*)|(\\W*(>)\\W*)/;\r\n                                if (format.test(value)) {\r\n                                  return Promise.reject(\r\n                                    'Restricted character/word(s) detected.'\r\n                                  );\r\n                                }\r\n                                return Promise.resolve();\r\n                              } else {\r\n                                return Promise.resolve();\r\n                              }\r\n                            },\r\n                          }),\r\n                        ]}\r\n                      >\r\n                        <Input\r\n                          placeholder='Email Address'\r\n                          prefix={<MailOutlined className='text-primary' />}\r\n                        />\r\n                      </Form.Item>\r\n                      <Form.Item className='mb-0'>\r\n                        <Button\r\n                          loading={false}\r\n                          type='default'\r\n                          htmlType='submit'\r\n                          block\r\n                        >\r\n                          {false ? 'Sending' : 'Send'}\r\n                        </Button>\r\n                      </Form.Item>\r\n                      <p className='text-right pr-2'>\r\n                        <a href='/auth/login' className='text-white'>\r\n                          Login\r\n                        </a>\r\n                      </p>\r\n                    </Form>\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nForgotPassword.propTypes = {\r\n  forgotPassword: PropTypes.func.isRequired,\r\n  isError: PropTypes.bool,\r\n  isErrorType: PropTypes.string,\r\n  errMessage: PropTypes.string,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  isError: state.auth.isError,\r\n  errMessage: state.auth.errMessage,\r\n  isErrorType: state.auth.isErrorType,\r\n});\r\nexport default connect(mapStateToProps, { forgotPassword })(ForgotPassword);\r\n"],"sourceRoot":""}